%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 153.000000 187.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 153 187
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 153 187
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /L put
dup 34 /S put
dup 35 /T put
dup 36 /M put
dup 37 /V put
dup 38 /parenleft put
dup 39 /s put
dup 40 /parenright put
dup 41 /pi put
dup 42 /t put
dup 43 /comma put
dup 44 /space put
dup 45 /a put
dup 46 /hyphen put
dup 47 /one put
dup 48 /r put
dup 49 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<




432419161617140C130701016E4E9A1D121F03010200000000010021FFF5016801C00044009B00B23902002BB04233B10B08E9B20B390A2BB3400B05092BB21703002BB01D33B429080031042BB229170A2BB3402925092B01B0452FB015D6B00032B42C0E002A042BB1080BE9B02C10B2150E102BB02732B4360E002A042BB1230BE9B046D6B108151112B04239B02C11B1093F3939B00E12B710110B1B1733393B241739B02311B01D3900B10B391112B03F39B02911B31519363B24173930313735343E01333216171E013332363534272E01272634363332173637363332161D01140E012322272623220615141E03171617161514062322270E030706232226210106060705020F413B3839683C32162B4C5438260B060D0708030106060B01086D3B35101527181750222A5051412D0609030101140508030D840B0806060B4549322949130C10122364491C09070C0A0E650B080509792D1F111A0F0E05050F212A353B502B060A040201140A00010013FFF5014C0267001C006E00B21602002BB10D09E9B20703002BB10A06E9B00032B00A10B10108E9B3121607082BB0062F01B01D2FB01BD6B10B0AE9B00632B21B0B0A2BB3401B00092BB00B10B1050BE9B0052FB20B050A2BB3400B09092BB00B10B21B10102BB1130BE9B01ED6B1100B1112B0163900303113353E0237331533152311143332363D013315140623222E023511132E3D1501198F8F431D2619323112242E1D0190160241502EB81FFEEA6C3B353739365109183B2B01140000000001001EFFEE01E001AE0037009200B22502002BB21902002BB41106001B042BB20503002BB43206001F042BB10D1F3232B20503002BB436060018042B01B0382FB030D6B1210BE9B3232130082BB12810E9B0282FB12310E9B02110B2301E102BB10F0BE9B20F1E0A2BB3400F0A092BB3400F16092BB039D6B130281112B1252B393900B111191112B216282A393939B03611B1142D3939B03212B0003930311334363736332132161D01140607231514333236333215140623222E023D01231514070623222635343E023534263D0123220E0122261E2A160C19013E0D09080B704611200411281E202A1104830F081E1217161916011B1B2713080801640E300804090E130D090187A5181E1C2A26483729AA85716029180D0C22244F320412056C090A070000FFFF005F02E60129035E10070013000000FD00000001005F01E901290261000D002700B0072FB10608E9B0032F01B00E2FB000D6B40613000A042BB00FD600B103061112B009393031133436333216170726272E035F130F0A217D0B078E0C071106023C0D18134E17022C0402090D00FFFFFE6B02E6FF35035E10070012FE0C00000000000100000000B333D9B910DD5F0F3CF5001F03E800000000C65FA56100000000

00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/comma 4 def
/hyphen 5 def
/one 6 def
/L 7 def
/M 8 def
/S 9 def
/T 10 def
/V 11 def
/a 12 def
/d 13 def
/r 14 def
/s 15 def
/t 16 def
/pi 17 def
/grave.cap 18 def
/grave.uc 19 def
/uni0300.cap 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CA4055EE8746D9A2C65433B2267FD1CCC371F46876341E35392177C0263EEE28CFA476D20D38BDD67E0F74A687175FE2AE507B7E5A24573D3A365AD3CADF1CE52F9F178E91B06E77BB67DBCB6962CBE5DA4C61FF8758CDB14E1B14FA28E4212B74D089F48B4E3710E43DDFD5E10C5670C12FA62F46B9747B6D7BF86BB32AC304A9C539A2179A72266280333FC2A94225FBC48BE03FF86C7D0D568AAAB6E0C73ECA9C0AAF248AFCFF0AC3A6CB987896728B15637162ADDF78904747760E3AEB414D24BFC27F20AE3270149A225F767F7A141CDBA2571F1F58FCD3987C94D576E53367FE8FBA817962385818471CC3AB02B19A90DAE491D1E735B43C98AF21D6FDC2FD601CE379BE357E862D2FDA17AC28D5B5FDD248A6B2D66EFFDCF527A3169CE4E07BD890146E291FEA4AD53C0CEF5736BE8B2DEEEA0611B97F99BA6CC5279629275AC7EE696E17D988CC682AD4D21D40632A8118C6C53E31DC5B3260BBBD3CC1BC008DACE8942E694BF9E353EFE3B98673BC71B6A575391E17F539D16318A37D51BC4BC3750C4F2F034F02DB687B076FCCABC4FC366294605C5F036D5CED49150577BBAC399A14E376768991194994E142EA11F9D6184805F0BF6DEFB8070189C7321FFC1C2A32B188E13FDA8DCD00E62692A22379820F7D356AE28653FB6E50F2C64B0E7CE46A865CD9B5F61E4D249BAACD11321B890D028A065A17E087C365160558A3EEE5A1AD16808385F0CBE37932EC9576BA3E3214BFC65E6E6EA9075BE77D1395EAC4F09F42F76012EB76713902FF8

18D3F77EF44F462FDA22F5A5BB323FC8F744A89460ADCE23B4BC18DBE1C17218E6604F5E2D50B465F192FB6C798604051543D4D152379F53601071F32AB9022027E928508EC4BEAFF17D2C644E26BCAD2BDD18C87C378573ABD325193AE41926755F3BEE297CDE44D636BD2620E77FD78B95E6299CF54F4E6D72B747DDBA1BD83E8398D24DDC2C96FA1C917135C25C368B2904835EE909AA6EAAF73CE2AAA1F787D10CB13103671F46839DA7FCF6AC5936F0567FF09A48FD4260E966677E42A8A0339912E35F2B203CEE77E107D9BE43A22A708061B27B1CCF22E91CE6A72885D4659814D0013C1B74FAC2247738204F90A45746A63A3BAADB202BF523D9B3AA0CE8BCF407EDE98E65F8B0F703E58DD26E0EA9F2F0AE2235B84FAEF7ADF5CE257A890EB223EF3AA87D6B97833CEF2B09E30F0EC71402C0399DE820E34258DF77EDD7F40835AE72B4E4B4DD1E72D551FD8BEA3363F1F748014779971EB01970E84456A4E84F8CE255F7D94521E1F2D2B5B542972EE9F250A23B5F2B9EBC84CEEC5A8F4D4CAD02C5962E614DBD48229AB0BB3F1B2CFF057A2A9D7AE00E5129DD41A840DEA3104550A43D4904A59CDDE9F568D0238E053ED317C8876BAE4A6E476A8D67804BECDA2594797B76AA7554A503DCE4FB526AB515B4BB9A0CB5EE208587D9DC68518003347B191451D637C145F3F8540A2E21380D66E19FD815842D439AF05A005156CBC5A388A3FE2D9131DC949C9FC48A20E5A374B7A3A9434E02EF976774C4A99019194FF9AEC366A72057E99EB3A2B22A850856BE6D52680338000AFA23CA88306E53645045B30E9225679D650860A8072FC063586A1BE0EA17505C523B080D0F88EADC1A12A7BEC262CE677BBB5492A256C67E956987E9343E0F01BE322346ECECA4682440A6D5BB55E1FF04329DAE91FDC550E3A2CD0379992E146552B515CFDB264E397A59B2F09CF15C014BB8E09434E68ACCB2C5275F3FC8F27D570EF9B54CDA6413032B7B519075F6D214062539AB32ADCE3E7B199D36058FD52CE099998778703A057FA9C9D4760D57F9110883B74AC84134EDB9A2469DA3064775E21266D6619B25717D5794A50DD3CFA936D013068854AF64813601C76AF106DFCA14F9D1E955B69F28BCE8221C279D9EEA2E66F4FE378FE2204A11EEB5C936BE323B54385E52090B5FC6FBEE0A352D42311E9FDF619593C40A58A5665E24F6F9BE3EA55E2D785CD1CBC7C7C9E5522B45464B35A2096F02BF41342E1B3CBA2B4CF5C84377B94695EDC9D68C820B9A6A96807E820437C2CE5463AF7DED2FF799AEC2140D639E6033D513A14A31968C7AF9314D288B66DF2DFBA3BEAF2912D62F62B7C15B6A0B66AB7DF3912F86DF92CEE8B59EA91AE46EF2BDD328956136D0975B66602AE002A77BB8F1A79A5C3C3E41D88E6077A6D5F008909036112AFB

E7200DBE0FB71598114BDBA35F3B15FD325568A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F1.1/CMUSerif-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 153 187 rc
-1859 1729 m
2359 1729 l
2359 -1319 l
-1859 -1319 l
h
-1859 1729 m
f
27 111 m
126 111 l
126 73 l
27 73 l
h
27 111 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -453 713 cm
480 602 m
579 602 l
579 640 l
480 640 l
h
480 602 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 76.5 92 cm
/F1.1[ 16 0 0 -16 0 0]sf
-22.544001 3.9000244 m
(!"#$)[ 10.000000 8.880000 11.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
0.5 186 m
66 186 l
66 148 l
0.5 148 l
h
0.5 186 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -453 713 cm
453.5 527 m
519 527 l
519 565 l
453.5 565 l
h
453.5 527 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 33.25 167 cm
-15.36 3.9000244 m
(%&'\()[ 12.000000 6.208000 6.304000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
88 186 m
152.5 186 l
152.5 148 l
88 148 l
h
88 186 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -453 713 cm
541 527 m
605.5 527 l
605.5 565 l
541 565 l
h
541 527 m
S
0.26025039 0.26024261 0.26024702 sc
0 i
1 0 0 -1 120.25 167 cm
-13.472 3.9000244 m
(\))s
/Cs2 SC
0 sc
-5.2480001 3.9000244 m
(&'\()[ 6.208000 6.304000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -453 713 cm
518.29358 601.56683 m
502.40204 574.00934 l
S
0 i
CM
45.405598 145.92093 m
46.8032 137.492 l
52.000893 140.48933 l
h
45.405598 145.92093 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
498.40561 567.0791 m
499.80319 575.508 l
505.00089 572.51068 l
h
498.40561 567.0791 m
S
1 J
1 j
0.60000002 i
540.83527 601.56812 m
556.92645 573.98328 l
S
0 i
CM
107.95744 145.92693 m
101.33514 140.52832 l
106.51781 137.50508 l
h
107.95744 145.92693 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
560.95746 567.07306 m
554.33514 572.47168 l
559.51782 575.49493 l
h
560.95746 567.07306 m
S
1 J
1 j
0.60000002 i
529.5 675 m
529.5 650.40002 l
S
0 i
CM
76.5 70.599998 m
73.5 62.599998 l
79.5 62.599998 l
h
76.5 70.599998 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
529.5 642.40002 m
526.5 650.40002 l
532.5 650.40002 l
h
529.5 642.40002 m
S
/Cs2 SC
0 sc
1 0 0 -1 76.5 18 cm
-51.640499 2.4000168 m
(')s
/F1.1[ 11 0 0 -11 0 0]sf
-45.336498 7.4000168 m
(*)s
/F1.1[ 16 0 0 -16 0 0]sf
-41.068501 2.4000168 m
(+,-)[ 4.432000 5.328000 0.000000 ] xS
/F1.1[ 11 0 0 -11 0 0]sf
-23.3085 7.4000168 m
(*./)[ 4.268000 3.663000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
-9.8774996 2.4000168 m
(+,0)[ 4.432000 5.328000 0.000000 ] xS
/F1.1[ 11 0 0 -11 0 0]sf
6.1385002 7.4000168 m
(*./)[ 4.268000 3.663000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
19.5695 2.4000168 m
(+,1)[ 4.432000 5.328000 0.000000 ] xS
/F1.1[ 11 0 0 -11 0 0]sf
38.209499 7.4000168 m
(*./)[ 4.268000 3.663000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -453 713 cm
564.53143 601.75928 m
564.53143 589.85931 l
564.53143 587.77734 l
589.98828 587.77734 l
598.5 587.77734 l
598.5 658.5 l
564.89929 658.5 l
564.89929 652.13873 l
564.89929 650.13873 l
S
0 i
CM
111.89931 70.861244 m
108.89931 62.861244 l
114.89931 62.861244 l
h
111.89931 70.861244 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
564.89929 642.13873 m
561.89929 650.13873 l
567.89929 650.13873 l
h
564.89929 642.13873 m
S
ep
end
%%Trailer
%%EOF
